<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="parrotButton1.ButtonImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MfA6Sp5akgAAAABJRU5ErkJggg==
</value>
  </data>
</root>